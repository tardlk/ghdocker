name: 更新 Docker 镜像 → 定时更新 ghcr.io

on:
  schedule:
    # 每天的 UTC 时间 16:00 (北京时间 00:00) 运行
    - cron: "0 16 * * *"
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  check-and-update:
    runs-on: ubuntu-latest
    steps:
      - name: 1. 检出仓库
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 2. 安装依赖
        run: sudo apt-get update && sudo apt-get install -y jq skopeo

      # 步骤 3-7 保持不变，它们是正确的
      - name: 3. 提取目标镜像名称
        id: extract-target-images
        run: |
          owner_lowercase=$(echo "${{ github.repository_owner }}" | tr 'A-Z' 'a-z')
          awk -F '|' '
          /^### 已同步的 Docker 镜像/ {capture=1; next}
          capture && /^\| [0-9]+/ {
              sync_col=$6; gsub(/^[ \t]+|[ \t]+$/, "", sync_col);
              if (sync_col != "✔️") next;
              gsub(/^[ \t]+|[ \t]+$/, "", $4); gsub(/`/, "", $4);
              print $4
          }
          /^### / && capture && !/已同步/ {capture=0}
          ' README.md | grep -vE '^源镜像$|^-+$' | sed '/^$/d' | \
          sed "s|^ghcr.io/$owner_lowercase/||" | \
          sed 's/:[^:]*$//' > target-image-list.txt
          echo "===== 将要检查的目标镜像列表 ====="
          cat target-image-list.txt

      - name: 4. 提取源镜像名称
        id: extract-source-images
        run: |
          awk -F '|' '
          /^### 已同步的 Docker 镜像/ {capture=1; next}
          capture && /^\| [0-9]+/ {
              sync_col=$6; gsub(/^[ \t]+|[ \t]+$/, "", sync_col);
              if (sync_col != "✔️") next;
              gsub(/^[ \t]+|[ \t]+$/, "", $3); gsub(/`/, "", $3);
              print $3
          }
          /^### / && capture && !/已同步/ {capture=0}
          ' README.md | grep -vE '^源镜像$|^-+$' | sed '/^$/d' > source-image-list.txt
          echo "===== 对应的源镜像列表 ====="
          cat source-image-list.txt

      - name: 5. 合并镜像列表
        run: |
          if [ ! -s source-image-list.txt ] || [ ! -s target-image-list.txt ]; then
            echo "错误：源或目标镜像列表为空，请检查 README.md 表格格式。"
            exit 1
          fi
          paste -d '|' source-image-list.txt target-image-list.txt > combined-list.txt
          echo "===== 合并后的镜像检查列表 ====="
          cat combined-list.txt

      - name: 6a. 检查 Docker Hub 凭证是否存在
        id: check_dockerhub_creds
        run: |
          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "present=true" >> "$GITHUB_OUTPUT"
          else
            echo "present=false" >> "$GITHUB_OUTPUT"
          fi

      - name: 6b. 登录到 Docker Hub (如果凭证存在)
        if: steps.check_dockerhub_creds.outputs.present == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 7. 登录到 GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 8. 检查并同步镜像
        env:
          GHCR_USER: ${{ github.repository_owner }}
          # 将 Docker 配置文件路径也设为环境变量，方便 skopeo 调用
          DOCKER_CONFIG: /home/runner/.docker
        run: |
          set -eo pipefail

          # 函数：从 manifest 内容中为指定架构提取唯一的 digest
          get_digest_for_arch() {
            local manifest_content=$1
            local arch_name=$2
            if [ -z "$manifest_content" ]; then echo ""; return; fi
            
            if echo "$manifest_content" | jq -e '.manifests' > /dev/null 2>&1; then
              # 精确匹配架构，并处理 arm/v7 和 arm64/v8 变体
              echo "$manifest_content" | jq -r --arg arch "$arch_name" '
                .manifests[] | 
                select(
                  (.platform.architecture == $arch and .platform.variant? == null) or
                  ($arch == "arm" and .platform.architecture == "arm" and .platform.variant? == "v7") or
                  ($arch == "arm64" and .platform.architecture == "arm64" and .platform.variant? == "v8")
                ) | .digest' | head -n 1
            else
              # 单架构镜像
              echo "$manifest_content" | jq -r '.digest // empty'
            fi
          }

          echo "===== 开始同步镜像 ====="
          
          while IFS='|' read -r source_image target_image; do
            echo "────────────────────────────────────────"
            echo "处理镜像: $target_image (源镜像: $source_image)"
            
            # 准备源和目标URI
            if [[ "$source_image" == *:* ]]; then
              source_image_name_tag="$source_image"
            else
              source_image_name_tag="$source_image:latest"
            fi
            owner_lowercase=$(echo "$GHCR_USER" | tr 'A-Z' 'a-z')
            target_image_name_tag="ghcr.io/$owner_lowercase/$target_image:latest"
            
            SOURCE_IMAGE_URI="docker://$source_image_name_tag"
            TARGET_IMAGE_URI="docker://$target_image_name_tag"

            # 【修改点 1】增强 skopeo inspect 的错误处理，并添加 --authfile 参数
            if ! source_manifest=$(skopeo inspect --authfile ${DOCKER_CONFIG}/config.json --raw "$SOURCE_IMAGE_URI" 2>/dev/null); then
              echo "❌ 错误：执行 'skopeo inspect' 失败 (可能是网络问题或镜像不存在)，已跳过 '$SOURCE_IMAGE_URI'。"
              continue
            fi
            
            if [ -z "$source_manifest" ]; then
              echo "❌ 错误：无法获取源镜像清单 (清单为空)，已跳过 '$SOURCE_IMAGE_URI'。"
              continue
            fi
            
            # 【修改点 2】为目标镜像的 inspect 也添加认证参数，并优化逻辑
            target_manifest=$(skopeo inspect --authfile ${DOCKER_CONFIG}/config.json --raw "$TARGET_IMAGE_URI" 2>/dev/null || echo "")
            
            # 确定要检查的架构列表
            ARCHS_TO_CHECK="amd64 arm64 arm" # 我们只关心这几个主流架构
            
            need_update=false
            if [ -z "$target_manifest" ]; then
              need_update=true
              echo "目标镜像不存在，判定需要同步。"
            else
              for arch in $ARCHS_TO_CHECK; do
                source_digest_for_arch=$(get_digest_for_arch "$source_manifest" "$arch")
                # 如果源镜像压根不支持这个架构，我们就没必要比较了
                if [ -z "$source_digest_for_arch" ]; then continue; fi

                target_digest_for_arch=$(get_digest_for_arch "$target_manifest" "$arch")
                echo "检查架构 '$arch': 源[${source_digest_for_arch:0:12}] <=> 目标[${target_digest_for_arch:0:12}]"
                
                if [ "$source_digest_for_arch" != "$target_digest_for_arch" ]; then
                  need_update=true
                  echo "发现不匹配的摘要，判定需要同步。"
                  break
                fi
              done
            fi

            if [ "$need_update" = "false" ]; then
              echo "✅ 所有已检查架构的摘要均匹配，跳过同步。"
              continue
            fi

            echo "开始使用 skopeo copy 同步..."

            # 【修改点 3】为 skopeo copy 添加 --all 和 --authfile 参数
            if skopeo copy --all --authfile ${DOCKER_CONFIG}/config.json "$SOURCE_IMAGE_URI" "$TARGET_IMAGE_URI"; then
              echo "✅ 镜像同步成功: $target_image_name_tag"
            else
              echo "❌ 镜像同步失败，请检查源镜像是否存在或网络连接。"
              continue
            fi

            # 更新 README.md
            today=$(date +'%Y-%m-%d')
            awk -F'|' -v img_name="$target_image" -v date="$today" '
              BEGIN{OFS=FS}
              $4 ~ "`ghcr.io/.*/" img_name "(:[^`]+)?`" && $6 ~ /✔️/ { $7 = " " date " "; print; next }
              {print}
            ' README.md > README.tmp && mv README.tmp README.md
            
            git config --global user.name "github-actions[bot]"
            git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add README.md
            if ! git diff --staged --quiet; then
              git commit -m "chore(sync): 更新镜像 [$target_image] 的同步时间"
              git push
            else
              echo "README.md 无变更，无需提交。"
            fi
          done < combined-list.txt
