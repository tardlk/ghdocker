name: 将 Docker 镜像同步到 ghcr.io
run-name: 同步镜像 ${{ github.event.inputs.images }} 到 ghcr.io

on:
  workflow_dispatch:
    inputs:
      images:
        description: '要同步的镜像列表，用逗号分隔，格式为 镜像名:标签，例如：nginx:latest,alpine:3.18'
        required: true
        type: string
      ghcr_names:
        description: '(可选) 同步到ghcr的镜像名，用逗号分隔，顺序与上面的images对应，不填则保持原名'
        required: false
        type: string
      change_tag_to_latest:
        description: '是否将同步后的镜像标签改为latest'
        required: true
        type: boolean
        default: true

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    env:
      GHCR_USER: ${{ github.repository_owner }}
      UNIQUE_SEPARATOR: '|||'  # 用于表格数据的分隔符

    steps:
      - name: Checkout 代码
        uses: actions/checkout@v3

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 登录到 GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 登录到 Docker Hub (可选)
        if: ${{ secrets.DOCKERHUB_USERNAME && secrets.DOCKERHUB_TOKEN }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 解析输入参数
        id: parse_input
        run: |
          # 分割镜像列表
          IFS=',' read -ra IMAGES <<< "${{ github.event.inputs.images }}"
          echo "镜像数量: ${#IMAGES[@]}"
          
          # 分割ghcr镜像名列表（如果提供）
          if [ -n "${{ github.event.inputs.ghcr_names }}" ]; then
            IFS=',' read -ra GHCR_NAMES <<< "${{ github.event.inputs.ghcr_names }}"
            echo "ghcr镜像名数量: ${#GHCR_NAMES[@]}"
          fi
          
          # 保存到环境变量
          echo "IMAGE_COUNT=${#IMAGES[@]}" >> $GITHUB_ENV
          
          # 输出每个镜像信息
          for i in "${!IMAGES[@]}"; do
            echo "IMAGE_$i=${IMAGES[$i]}" >> $GITHUB_ENV
            if [ -n "${GHCR_NAMES[$i]}" ]; then
              echo "GHCR_NAME_$i=${GHCR_NAMES[$i]}" >> $GITHUB_ENV
            fi
          done

      - name: 同步镜像
        id: sync_images
        run: |
          # 初始化表格行变量
          table_rows=""
          
          # 循环处理每个镜像
          for ((i=0; i<${{ env.IMAGE_COUNT }}; i++)); do
            # 获取当前镜像信息
            full_image=$(eval echo "\$IMAGE_$i")
            ghcr_name=$(eval echo "\${GHCR_NAME_$i:-}")
            
            # 解析镜像名和标签
            if [[ "$full_image" == *":"* ]]; then
              image_name="${full_image%:*}"
              image_tag="${full_image#*:}"
            else
              image_name="$full_image"
              image_tag="latest"
            fi
            
            # 确定目标镜像名
            if [ -z "$ghcr_name" ]; then
              # 如果未指定ghcr名称，使用原始镜像名（处理仓库前缀）
              target_name=$(echo "$image_name" | sed 's/[^a-zA-Z0-9_.-]/_/g')
            else
              target_name="$ghcr_name"
            fi
            
            # 确定目标标签
            if [ "${{ github.event.inputs.change_tag_to_latest }}" = "true" ]; then
              target_tag="latest"
            else
              target_tag="$image_tag"
            fi
            
            echo "------------------------------------------------"
            echo "处理镜像: $full_image"
            echo "目标镜像: ghcr.io/${{ env.GHCR_USER }}/$target_name:$target_tag"
            echo "------------------------------------------------"
            
            # 同步镜像
            sync_status="❌"  # 默认同步失败
            try=1
            max_tries=3
            
            while [ $try -le $max_tries ]; do
              echo "第 $try 次尝试同步..."
              
              # 使用buildx进行镜像同步
              if docker buildx imagetools create -t "ghcr.io/${{ env.GHCR_USER }}/$target_name:$target_tag" "$full_image"; then
                sync_status="✔️"
                echo "镜像同步成功!"
                
                # 如果配置了Docker Hub，也推送到Docker Hub
                if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
                  echo "同步到Docker Hub: ${{ secrets.DOCKERHUB_USERNAME }}/$target_name:$target_tag"
                  if docker buildx imagetools create -t "${{ secrets.DOCKERHUB_USERNAME }}/$target_name:$target_tag" "$full_image"; then
                    echo "成功推送到Docker Hub"
                  else
                    echo "推送到Docker Hub失败"
                  fi
                fi
                
                break
              else
                echo "第 $try 次同步失败，重试..."
                try=$((try + 1))
                sleep 5
              fi
            done
            
            # 准备表格行数据
            pull_cmd="ghcr.io/${{ env.GHCR_USER }}/$target_name"
            if [ "$target_tag" != "latest" ]; then
              pull_cmd="$pull_cmd:$target_tag"
            fi
            pull_cmd="\`$pull_cmd\`"
            
            # 当前日期时间
            update_time=$(date +"%Y-%m-%d %H:%M")
            
            # 添加到表格行
            table_rows+="| $((i+1)) | \`$full_image\` | $pull_cmd | $sync_status | $update_time |"$'\n'
          done
          
          # 保存表格行到环境变量
          echo "TABLE_ROWS<<EOF" >> $GITHUB_ENV
          echo "$table_rows" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: 更新 README.md 中的镜像列表
        run: |
          # 读取当前README内容
          readme_content=$(cat README.md)
          
          # 查找表格开始和结束标记
          table_start="<!-- AUTO-GENERATED-IMAGE-TABLE-START -->"
          table_end="<!-- AUTO-GENERATED-IMAGE-TABLE-END -->"
          
          # 提取标记外的内容
          before_table=$(echo "$readme_content" | sed -n "1,/$table_start/ p" | sed "\,$table_start,d")
          after_table=$(echo "$readme_content" | sed -n "/$table_end/,$ p" | sed "\,$table_end,d")
          
          # 表格标题
          TABLE_TITLE="### 已同步的 Docker 镜像"
          
          # 生成新表格内容
          {
            echo "$before_table"
            echo "$table_start"
            echo ""
            echo "$TABLE_TITLE"
            echo ""
            echo "|   | 源镜像 | pull 镜像 | 同步 | 更新时间 |"
            echo "| ---- | -------- | --------- | ---- | -------- |"
            echo "${{ env.TABLE_ROWS }}"
            echo ""
            echo "$table_end"
            echo "$after_table"
          } > README.md

      - name: 提交 README 更新
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          git add README.md
          
          if git diff --staged --quiet; then
            echo "没有新的镜像或文件变更可提交。"
          else
            git commit -m "docs: 更新镜像同步列表: ${{ github.event.inputs.images }}"
            git push
          fi
